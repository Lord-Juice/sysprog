paul@KruesselPC:~/sysprog/aufgabe2$ make clean
rm -f bubblesort bubblesort.o
paul@KruesselPC:~/sysprog/aufgabe2$ javac Bubblesort.java
paul@KruesselPC:~/sysprog/aufgabe2$ java Bubblesort  10
Bitte 10 ganze Zahlen eingeben: 2
45
23
543

12
3
534
2
43
25
Sortierte Zahlenfolge:
2
2
3
12
23
25
43
45
534
543
paul@KruesselPC:~/sysprog/aufgabe2$ make
gcc -g -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    bubblesort.c   -o bubblesort
paul@KruesselPC:~/sysprog/aufgabe2$ ./bubblesort 10
Bitte 10 ganze Zahlen eingeben: 2
45
23
543

12
3
534
2
43
25
Sortierte Zahlenfolge:
2
2
3
12
23
25
43
45
534
543
paul@KruesselPC:~/sysprog/aufgabe2$ valgrind ./bubblesort 10
==5095== Memcheck, a memory error detector
==5095== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==5095== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==5095== Command: ./bubblesort 10
==5095==
Bitte 10 ganze Zahlen eingeben: 321
132
43

37654
65
87654
34
57
675
45
Sortierte Zahlenfolge:
34
43
45
57
65
132
321
675
37654
87654
==5095==
==5095== HEAP SUMMARY:
==5095==     in use at exit: 0 bytes in 0 blocks
==5095==   total heap usage: 3 allocs, 3 frees, 2,088 bytes allocated
==5095==
==5095== All heap blocks were freed -- no leaks are possible
==5095==
==5095== For lists of detected and suppressed errors, rerun with: -s
==5095== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
paul@KruesselPC:~/sysprog/aufgabe2$ make cppcheck
cppcheck --enable=warning,style --std=c11 bubblesort.c
Checking bubblesort.c ...
paul@KruesselPC:~/sysprog/aufgabe2$ ./bubblesort 1000 < /dev/null | tail -1000 > out.txt
paul@KruesselPC:~/sysprog/aufgabe2$ sort -n out.txt |diff - out.txt
paul@KruesselPC:~/sysprog/aufgabe2$ man tail
paul@KruesselPC:~/sysprog/aufgabe2$ time java Bubblesort 1000 < /dev/null > /dev/null

real    0m0.071s
user    0m0.084s
sys     0m0.021s
paul@KruesselPC:~/sysprog/aufgabe2$ time ./bubblesort 1000 < /dev/null > /dev/null

real    0m0.002s
user    0m0.000s
sys     0m0.000s
paul@KruesselPC:~/sysprog/aufgabe2$ time java Bubblesort 10000 < /dev/null > /dev/null

real    0m0.119s
user    0m0.244s
sys     0m0.011s
paul@KruesselPC:~/sysprog/aufgabe2$ time ./bubblesort 10000 < /dev/null > /dev/null

real    0m0.083s
user    0m0.090s
sys     0m0.000s
paul@KruesselPC:~/sysprog/aufgabe2$ time java Bubblesort 100000 < /dev/null > /dev/null

real    0m12.322s
user    0m9.611s
sys     0m0.091s
paul@KruesselPC:~/sysprog/aufgabe2$ time ./bubblesort 100000 < /dev/null > /dev/null

real    0m13.981s
user    0m15.251s
sys     0m0.000s
paul@KruesselPC:~/sysprog/aufgabe2$ make "CC=gcc -g -O2" clean all
rm -f bubblesort bubblesort.o
gcc -g -O2 -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    bubblesort.c   -o bubblesort
paul@KruesselPC:~/sysprog/aufgabe2$ time ./bubblesort 100000 < /dev/null > /dev/null

real    0m20.540s
user    0m21.947s
sys     0m0.000s

Beantwortung der Fragen:

Wächst die Ausführungszeit tatsächlich quadratisch mit der Array-Größe?
Ja. Bubblesort benötigt bei einem Array mit 1.000 Einträgen 0,002 Sekunden, bei 10.000 Einträgen nur 0,083s, aber über 12 Sekunden, wenn das Array 100.000 Einträge hat.
D.h., es wächst definitiv nicht linear sondern exponential.

Ist das Java-Programm oder das C-Programm schneller? Können Sie sich den Unterschied erklären?
Bei 1.000 und 10.000 Einträgen ist das C-Programm schneller. Sobald das Array aber 100.000 Einträge hat, wird die Java Implementation schneller.
Dies liegt daran, dass Java in C kompiliert wird, bevor es ausgeführt werden kann. Dies wird von einem Kompilierer durchgeführt, welcher deutlich
optimierteren C-Code schreibt, als ich kann. Daher benötigt es am Anfang länger, da der Prozess der Kompilierung länger dauert, als mein C-Programm.
Sobald die Laufzeit aber ca. eine Sekunde überschreitet, spielt dies keine Rolle mehr, da ab diesem Punkt der Kompilierte C-Code lang genug läuft, 
um den Zeitverlust der Kompilierung gegenüber meines C-Codes wett zumachen.

Ist das optimierte Programm schneller?
Dies ist der Log für das Optimierte Programm:
paul@KruesselPC:~/sysprog/aufgabe2$ make clean
rm -f bubblesort bubblesort.o
paul@KruesselPC:~/sysprog/aufgabe2$ make
gcc -g -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    bubblesort.c   -o bubblesort
paul@KruesselPC:~/sysprog/aufgabe2$ time ./bubblesort 1000 < /dev/null > /dev/null

real    0m0.002s
user    0m0.000s
sys     0m0.000s
paul@KruesselPC:~/sysprog/aufgabe2$ time ./bubblesort 10000 < /dev/null > /dev/null

real    0m0.079s
user    0m0.086s
sys     0m0.000s
paul@KruesselPC:~/sysprog/aufgabe2$ time ./bubblesort 100000 < /dev/null > /dev/null

real    0m17.081s
user    0m15.152s
sys     0m0.000s
paul@KruesselPC:~/sysprog/aufgabe2$ time ./bubblesort 100000 < /dev/null > /dev/null

real    0m13.959s
user    0m15.221s
sys     0m0.000s
paul@KruesselPC:~/sysprog/aufgabe2$ make clean
rm -f bubblesort bubblesort.o
paul@KruesselPC:~/sysprog/aufgabe2$ make "CC=gcc -g -O2" clean all
rm -f bubblesort bubblesort.o
gcc -g -O2 -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    bubblesort.c   -o bubblesort
paul@KruesselPC:~/sysprog/aufgabe2$ time ./bubblesort 1000 < /dev/null > /dev/null

real    0m0.002s
user    0m0.001s
sys     0m0.000s
paul@KruesselPC:~/sysprog/aufgabe2$ time ./bubblesort 10000 < /dev/null > /dev/null

real    0m0.138s
user    0m0.150s
sys     0m0.000s
paul@KruesselPC:~/sysprog/aufgabe2$ time ./bubblesort 100000 < /dev/null > /dev/null

real    0m20.201s
user    0m22.036s
sys     0m0.000s
paul@KruesselPC:~/sysprog/aufgabe2$ time ./bubblesort 100000 < /dev/null > /dev/null

real    0m20.355s
user    0m22.050s
sys     0m0.000s
paul@KruesselPC:~/sysprog/aufgabe2$

Es ist klar zu erkennen, dass das unoptimierte Programm schneller ist.