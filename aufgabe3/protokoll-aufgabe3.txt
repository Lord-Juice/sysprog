paul@KruesselPC:~/sysprog/aufgabe3$ javac Stringsort.java
paul@KruesselPC:~/sysprog/aufgabe3$ java Stringsort 200
Unsortiertes Array:
152 177 137 141 59 82 13 82 145 19 8 192 126 167 130 124 190 157 159 43 186 155 94 161 38 130 126 160 66 4 53 168 91 186 175 197 102 34 63 70 176 198 21 50 61 56 196 53 99 81 199 120 170 41 23 190 138 24 19 42 177 147 101 150 23 154 5 167 176 199 92 124 110 169 39 165 176 190 102 113 4 199 40 55 108 157 77 110 119 65 16 24 95 49 46 17 42 39 143 29 55 43 160 128 135 145 187 183 174 37 12 163 44 115 40 14 5 147 116 166 153 193 183 142 8 171 181 164 198 67 50 69 127 68 183 116 199 34 67 42 24 90 9 16 161 176 66 152 48 40 143 89 140 28 134 8 169 12 46 131 176 107 88 98 162 46 12 127 74 80 85 140 156 152 138 59 22 12 98 192 105 87 59 91 4 101 48 34 45 32 140 156 180 171 23 151 191 107 156 35 
Sortiertes Array:
101* 102* 105 107* 108 110* 113 115 116* 119 12*** 120 124* 126* 127* 128 13 130* 131 134 135 137 138* 14 140** 141 142 143* 145* 147* 150 151 152** 153 154 155 156** 157* 159 16* 160* 161* 162 163 164 165 166 167* 168 169* 17 170 171* 174 175 176**** 177* 180 181 183** 186* 187 19* 190** 191 192* 193 196 197 198* 199*** 21 22 23** 24** 28 29 32 34** 35 37 38 39* 4** 40** 41 42** 43* 44 45 46** 48* 49 5* 50* 53* 55* 56 59** 61 63 65 66* 67* 68 69 70 74 77 8** 80 81 82* 85 87 88 89 9 90 91* 92 94 95 98* 99
paul@KruesselPC:~/sysprog/aufgabe3$ make
gcc -g -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    stringsort.c   -o stringsort
paul@KruesselPC:~/sysprog/aufgabe3$ ./stringsort 200
Unsortiertes Array:
115 55 152 49 110 183 194 51 26 11 22 138 107 75 194 106 56 156 44 178 1 135 87 160 140 120 45 116 123 89 11 38 96 163 39 158 147 185 162 125 197 136 15 56 11 9 162 20 166 158 150 119 94 37 79 34 109 125 103 33 166 114 23 14 29 15 124 128 0 86 53 149 22 20 5 186 182 167 6 148 78 108 67 172 146 99 158 7 24 13 192 142 127 16 108 109 31 32 37 183 71 43 85 93 63 90 31 45 10 189 145 88 98 165 12 196 64 170 3 40 184 196 134 63 164 42 172 147 74 10 82 145 53 167 191 116 10 174 114 20 164 59 60 62 24 72 10 40 42 13 80 178 161 14 42 77 8 166 24 83 176 59 180 181 26 123 98 36 98 12 8 14 23 20 76 48 92 38 40 87 3 121 65 165 87 59 194 48 26 171 83 2 30 63 184 8 139 34 45 189 
Sortiertes Array:
0 1 10*** 103 106 107 108* 109* 11** 110 114* 115 116* 119 12* 120 121 123* 124 125* 127 128 13* 134 135 136 138 139 14** 140 142 145* 146 147* 148 149 15* 150 152 156 158** 16 160 161 162* 163 164* 165* 166** 167* 170 171 172* 174 176 178* 180 181 182 183* 184* 185 186 189* 191 192 194** 196* 197 2 20*** 22* 23* 24** 26** 29 3* 30 31* 32 33 34* 36 37* 38* 39 40** 42** 43 44 45** 48* 49 5 51 53* 55 56* 59** 6 60 62 63** 64 65 67 7 71 72 74 75 76 77 78 79 8** 80 82 83* 85 86 87** 88 89 9 90 92 93 94 96 98** 99
paul@KruesselPC:~/sysprog/aufgabe3$ valgrind ./stringsort 200
==9645== Memcheck, a memory error detector
==9645== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==9645== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==9645== Command: ./stringsort 200
==9645== 
Unsortiertes Array:
86 193 112 159 5 36 170 4 161 168 31 121 135 137 57 115 115 60 16 153 153 113 9 151 190 47 51 196 15 170 155 53 115 19 164 120 8 135 77 169 103 60 42 190 197 52 106 113 112 122 18 17 35 27 168 25 74 171 173 41 141 81 46 56 100 11 129 108 146 6 29 1 18 24 191 168 28 97 81 140 171 51 157 6 79 77 183 105 0 157 99 141 38 145 149 90 156 78 151 102 36 180 103 55 156 95 175 184 144 56 76 116 107 185 122 138 14 58 44 14 167 143 155 5 88 57 47 45 87 198 99 124 131 3 131 87 50 106 24 194 114 52 62 173 38 137 64 52 195 108 19 162 3 126 119 43 183 166 88 71 117 140 147 48 95 30 87 145 136 111 91 2 164 154 127 154 91 191 158 38 51 177 0 54 56 71 50 39 37 90 62 106 30 9 154 125 39 42 22 127 
Sortiertes Array:
0* 1 100 102 103* 105 106** 107 108* 11 111 112* 113* 114 115** 116 117 119 120 121 122* 124 125 126 127* 129 131* 135* 136 137* 138 14* 140* 141* 143 144 145* 146 147 149 15 151* 153* 154** 155* 156* 157* 158 159 16 161 162 164* 166 167 168** 169 17 170* 171* 173* 175 177 18* 180 183* 184 185 19* 190* 191* 193 194 195 196 197 198 2 22 24* 25 27 28 29 3* 30* 31 35 36* 37 38** 39* 4 41 42* 43 44 45 46 47* 48 5* 50* 51** 52** 53 54 55 56** 57* 58 6* 60* 62* 64 71* 74 76 77* 78 79 8 81* 86 87** 88* 9* 90* 91* 95* 97 99*
==9645== 
==9645== HEAP SUMMARY:
==9645==     in use at exit: 0 bytes in 0 blocks
==9645==   total heap usage: 202 allocs, 202 frees, 5,024 bytes allocated
==9645== 
==9645== All heap blocks were freed -- no leaks are possible
==9645== 
==9645== For lists of detected and suppressed errors, rerun with: -s
==9645== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
paul@KruesselPC:~/sysprog/aufgabe3$ make cppcheck
cppcheck --enable=warning,style --std=c11 stringsort.c
Checking stringsort.c ...
paul@KruesselPC:~/sysprog/aufgabe3$ make TARGET=stringsort-optimiert
gcc -g -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    stringsort-optimiert.c   -o stringsort-optimiert
paul@KruesselPC:~/sysprog/aufgabe3$ make TARGET=stringsort-optimiert cppcheck 
cppcheck --enable=warning,style --std=c11 stringsort-optimiert.c
Checking stringsort-optimiert.c ...
paul@KruesselPC:~/sysprog/aufgabe3$ ./stringsort-optimiert 200
Unsortiertes Array:
46 96 199 9 8 162 136 186 170 61 187 76 177 122 133 130 29 87 162 178 118 198 156 37 47 196 60 28 119 35 154 118 83 105 127 44 67 15 30 38 76 169 66 6 92 199 136 121 86 50 51 156 0 7 193 199 155 53 28 75 88 134 145 124 192 24 168 59 40 198 49 68 167 115 26 11 66 114 84 152 117 136 109 117 95 102 69 51 108 97 78 148 183 23 72 175 199 40 187 39 190 36 60 158 104 86 121 170 153 158 75 70 46 136 139 141 190 8 192 98 57 22 47 41 197 119 16 197 160 3 188 150 192 48 60 48 87 134 170 40 44 197 62 90 133 1 31 76 162 176 174 19 150 173 60 148 45 29 145 157 184 133 59 128 134 72 176 173 6 99 13 2 96 27 92 182 28 75 58 190 3 184 162 154 158 22 54 3 51 199 112 188 84 171 116 170 43 45 143 1 
Sortiertes Array:
0 1* 102 104 105 108 109 11 112 114 115 116 117* 118* 119* 121* 122 124 127 128 13 130 133** 134** 136*** 139 141 143 145* 148* 15 150* 152 153 154* 155 156* 157 158** 16 160 162*** 167 168 169 170*** 171 173* 174 175 176* 177 178 182 183 184* 186 187* 188* 19 190** 192** 193 196 197** 198* 199**** 2 22* 23 24 26 27 28** 29* 3** 30 31 35 36 37 38 39 40** 41 43 44* 45* 46* 47* 48* 49 50 51** 53 54 57 58 59* 6* 60*** 61 62 66* 67 68 69 7 70 72* 75** 76** 78 8* 83 84* 86* 87* 88 9 90 92* 95 96* 97 98 99
paul@KruesselPC:~/sysprog/aufgabe3$ valgrind ./stringsort-optimiert 
==9928== Memcheck, a memory error detector
==9928== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==9928== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==9928== Command: ./stringsort-optimiert
==9928== 
Usage: ./stringsort-optimiert Anzahl
==9928== 
==9928== HEAP SUMMARY:
==9928==     in use at exit: 0 bytes in 0 blocks
==9928==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==9928== 
==9928== All heap blocks were freed -- no leaks are possible
==9928== 
==9928== For lists of detected and suppressed errors, rerun with: -s
==9928== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
paul@KruesselPC:~/sysprog/aufgabe3$ time ./stringsort 20000 > /dev/null

real    0m1.457s
user    0m1.454s
sys     0m0.000s
paul@KruesselPC:~/sysprog/aufgabe3$ time ./stringsort-optimiert 20000 > /dev/null

real    0m1.676s
user    0m1.673s
sys     0m0.000s

Nein, das optimierte Programm ist nicht schneller.